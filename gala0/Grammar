%import common.WS_INLINE
%ignore WS_INLINE

?start: _NL* program

%declare _INDENT _DEDENT
_NL: /(\n[\t ]*)+/

name: /[A-Za-z_][A-Za-z0-9_]*/
path: name ("." name)*
number: /[0-9]+(\.[0-9]*)?/
string: /\"([^"\\]|\\n)*\"/
unit: /\(\)/

use_decl: "use" name
type_decl: "type" param_type_literal? decl_type_annot "=" type_decl_body
type_decl_body: _NL [_INDENT type_decl_line+ _DEDENT]
type_decl_line: name ":" type_literal _NL*
              | "fn" name "(" fn_args ")" type_annot _NL*

type_annot: ":" param_type_literal
type_literal: type_variable* concrete_type_literal
param_type_literal: (concrete_type_literal | type_variable)*
concrete_type_literal: "int"
            | name
            | unit
type_variable: /\'[a-z]+/
             | type_variable ":" path
             | "(" type_variable ")"

decl_type_annot: ":" decl_type_literal
decl_type_literal: "struct" | "enum" | "trait"

method_fn_decl: "fn" "(" type_literal ")" name "(" fn_args ")" type_annot? "=" body
fn_arg: name type_annot | "self"
fn_args: (fn_arg ("," fn_arg)* ","?)?

assign_stmt: expr "=" expr
if_stmt: "if" expr body
else_stmt: "else" body
         | "else" if_stmt

fn_call_args: (expr ("," expr)* ","?)?

literal: number
       | string

op: "==" | "<="
  | "*" | "-"
