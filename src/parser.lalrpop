use std::str::FromStr;

use ast;
use common::{Field, Literal, Arg, Type};
use lexer::Token;

grammar;

pub Program: ast::Program = <decls:(Body<TopDecl> "EOF")> => ast::Program(decls.0);

TopDecl: ast::TopDecl = {
    "extern" <name:Name> ":" <ty:Type> => ast::TopDecl::Extern(name, ty),
    "fn" <name:Name> "(" <args:Comma<Arg>> ")" ":" <ty:Type> "=" <stmts:Block<Stmt>> => ast::TopDecl::Fn(name, args, ty, stmts),
    "struct" <name:Name> "=" <fields:Block<Field>> => ast::TopDecl::Struct(name, fields),
};

Block<T>: Vec<T> = "Newline"+ "Indent" <body:Body<T>> "Dedent" => body;

Field: Field = <name:Name> ":" <ty:Type> => Field(name, ty);

Type: Type = {
    "int" => Type::Int,
    "string" => Type::String,
    "(" <args:Comma<Type>> ")" "->" <ret:Type> => Type::Fn(args, Box::new(ret)),
};

Body<T>: Vec<T> = {
    <f:T?> <v:("Newline"+ <T>)*> "Newline"* => match f {
        None => v,
        Some(s) => {
            let mut v = v;
            v.insert(0, s);
            v
        },
    }
};

Stmt: ast::Stmt = {
    <re:"let"?> <name:Name> "=" <expr:Expr> => ast::Stmt::Assign(match re { Some(_) => false, None => true }, name, expr),
    <expr:Expr> => ast::Stmt::Expr(expr),
    "if" <cond:Expr> ":" <body1:Block<Stmt>> <body2:("else" ":" Block<Stmt>)?> => ast::Stmt::If(cond, body1, body2.map(|(_, _, body)| body)),
    "while" <cond:Expr> ":" <body:Block<Stmt>> => ast::Stmt::While(cond, body),
    "return" <expr:Expr?> => ast::Stmt::Return(expr),
};

Expr: ast::Expr = DotExpr;

DotExpr: ast::Expr = {
    <left:DotExpr> "." <right:CompExpr> => ast::Expr::Dot(Box::new(left), Box::new(right)),
    <expr:CompExpr> => expr,
};

CompExpr: ast::Expr = {
    <left:CompExpr> "==" <right:ArithExpr> => ast::Expr::Equals(Box::new(left), Box::new(right)),
    <left:CompExpr> "!=" <right:ArithExpr> => ast::Expr::NotEquals(Box::new(left), Box::new(right)),
    <expr:ArithExpr> => expr,
};

ArithExpr: ast::Expr = {
    <left:ArithExpr> "+" <right:FactorExpr> => ast::Expr::Plus(Box::new(left), Box::new(right)),
    <left:ArithExpr> "-" <right:FactorExpr> => ast::Expr::Minus(Box::new(left), Box::new(right)),
    <expr:FactorExpr> => expr,
};

FactorExpr: ast::Expr = {
    <left:FactorExpr> "*" <right:Term> => ast::Expr::Times(Box::new(left), Box::new(right)),
    <expr:Term> => expr,
};

Term: ast::Expr = ExprBottom;

ExprBottom: ast::Expr = {
    <name:Name> "(" <args:Comma<Expr>> ")" => ast::Expr::Call(name, args),
    <literal:Literal> => ast::Expr::Literal(literal),
    <name:Name> => ast::Expr::Name(name),
};

Literal: Literal = {
    <int:"Integer"> => Literal::Int(int),
    <string:"String"> => Literal::String(string),
};

Arg: Arg = {
    <name:Name> ":" <ty:Type> => Arg(name, ty),
};

Comma<T>: Vec<T> = {
    <f:T?> <v:("," <T>)*> ","? => match f {
        None => v,
        Some(s) => {
            let mut v = v;
            v.insert(0, s);
            v
        },
    }
};

Name: String = "Ident" => <>.to_owned();

//

extern {
    type Location = usize;
    type Error = failure::Error;

    enum Token {
        // symbols
        "->" => Token::Arrow,
        "==" => Token::DoubleEqual,
        "!=" => Token::NotEqual,

        ":" => Token::Colon,
        "," => Token::Comma,
        "-" => Token::Dash,
        "." => Token::Dot,
        "=" => Token::Equal,
        "(" => Token::LeftParen,
        "+" => Token::Plus,
        ")" => Token::RightParen,
        "*" => Token::Star,

        // keywords
        "else" => Token::KeywordElse,
        "extern" => Token::KeywordExtern,
        "false" => Token::KeywordFalse,
        "fn" => Token::KeywordFn,
        "if" => Token::KeywordIf,
        "let" => Token::KeywordLet,
        "return" => Token::KeywordReturn,
        "struct" => Token::KeywordStruct,
        "true" => Token::KeywordTrue,
        "while" => Token::KeywordWhile,

        // type literals
        "bool" => Token::TypeBool,
        "char" => Token::TypeChar,
        "int" => Token::TypeInt,
        "string" => Token::TypeString,

        "EOF" => Token::EOF,
        "Newline" => Token::Newline,
        "Indent" => Token::Indent,
        "Dedent" => Token::Dedent,

        "Integer" => Token::Integer(<u32>),
        "String" => Token::String(<String>),
        "Ident" => Token::Ident(<String>),
    }
}

