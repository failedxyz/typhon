// whitespace
whitespace = _{ " " | "\t" | "\n" | "\\\n" }
linesep = _{ "\n" | ";" }

// module for files
module = { soi ~ modhead? ~ decl? ~ (linesep ~ decl?)* ~ eoi }
modhead = { "mod" ~ ident }
line = { soi ~ expr ~ eoi }

arg = { ident }
args = { (arg ~ ","?)* }

decl = { decl_fn | decl_struct }
decl_fn = { "fn" ~ ident ~ "(" ~ args? ~ ")" ~ "=" ~ expr }
decl_struct = { "struct" }

op_or        = @{ "or" ~ whitespace }
op_and       = @{ "and" ~ whitespace }
op_not       = @{ "not" ~ whitespace }
op_lte       = { "<=" }
op_gte       = { ">=" }
op_lt        = { "<" }
op_gt        = { ">" }
op_eq        = { "==" }
op_neq       = { "!=" }
op_add       = { "+" }
op_sub       = { "-" }
op_mul       = { "*" }
op_div       = { "/" }
op_mod       = { "%" }

anon_fn = { "fn" ~ ident? ~ "(" ~ args? ~ ")" ~ "=" ~ expr }
cond_expr = { "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr }
expr = { infix_expr | cond_expr | var_name | literal | anon_fn }
var_name = { ident }
op = _{ op_or | op_and | op_lte | op_gte | op_lt | op_gt | op_eq | op_neq | op_add | op_sub | op_mul | op_div | op_mod }
infix_expr = { value ~ (op ~ value)+ }
value = _{ var_name | literal | "(" ~ expr ~ ")" }

// literals
literal = { int }
int = @{ "-"? ~ ("0" | '1'..'9' ~ '0'..'9'*) }

// ident
all_chars = _{ 'a'..'z' | 'A'..'Z' | "_" | '0'..'9' }
ident = @{ ('a'..'z' | 'A'..'Z' | "_") ~ all_chars* }

